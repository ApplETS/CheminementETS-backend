// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "neutral"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Trimester {
  AUTOMNE
  ETE
  HIVER
}

model Session {
  id        String    @id @default(uuid())
  trimester Trimester
  year      Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  courseInstances CourseInstance[]
}

model CourseInstance {
  id        String @id @default(uuid())
  courseId  Int
  sessionId String

  course  Course  @relation(fields: [courseId], references: [id])
  session Session @relation(fields: [sessionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, sessionId])
  @@index([courseId, sessionId])
}

model Course {
  id              Int              @id
  code            String           @unique
  title           String
  description     String
  credits         Int
  programs        ProgramCourse[]
  courseInstances CourseInstance[]

  prerequisites  CoursePrerequisite[] @relation("CourseToPrerequisite")
  prerequisiteOf CoursePrerequisite[] @relation("PrerequisiteToCourse")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
}

model CoursePrerequisite {
  courseId       Int
  prerequisiteId Int

  course       Course @relation("CourseToPrerequisite", fields: [courseId], references: [id])
  prerequisite Course @relation("PrerequisiteToCourse", fields: [prerequisiteId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([courseId, prerequisiteId])
}

model ProgramCourse {
  courseId            Int
  programId           Int
  typicalSessionIndex Int

  course  Course  @relation(fields: [courseId], references: [id])
  program Program @relation(fields: [programId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([courseId, programId])
}

model Program {
  id           Int           @id
  code         String        @unique
  title        String
  credits      String
  cycle        Int
  url          String
  programTypes ProgramType[]

  horaireCoursPdfJson  Json?
  planificationPdfJson Json?
  courses              ProgramCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([code, title])
}

model ProgramType {
  id       Int       @id
  title    String
  programs Program[]
}
